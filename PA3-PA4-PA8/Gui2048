import javafx.application.*;
import javafx.scene.control.*;
import javafx.scene.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.scene.layout.*;
import javafx.stage.*;
import javafx.event.*;
import javafx.scene.input.*;
import javafx.scene.text.*;
import javafx.geometry.*;
import java.util.*;
import java.io.*;


public class Gui2048 extends Application
{
   private String outputBoard; // The filename for where to save the Board
   private Board board; // The 2048 Game Board

   private static final int TILE_WIDTH = 106;

   private static final int TEXT_SIZE_LOW = 55; // Low value tiles (2,4,8,etc)
   private static final int TEXT_SIZE_MID = 45; // Mid value tiles 
   //(128, 256, 512)
   private static final int TEXT_SIZE_HIGH = 35; // High value tiles 
   //(1024, 2048, Higher)

   // Fill colors for each of the Tile values
   private static final Color COLOR_EMPTY = Color.rgb(238, 228, 218, 0.35);
   private static final Color COLOR_2 = Color.rgb(238, 228, 218);
   private static final Color COLOR_4 = Color.rgb(237, 224, 200);
   private static final Color COLOR_8 = Color.rgb(242, 177, 121);
   private static final Color COLOR_16 = Color.rgb(245, 149, 99);
   private static final Color COLOR_32 = Color.rgb(246, 124, 95);
   private static final Color COLOR_64 = Color.rgb(246, 94, 59);
   private static final Color COLOR_128 = Color.rgb(237, 207, 114);
   private static final Color COLOR_256 = Color.rgb(237, 204, 97);
   private static final Color COLOR_512 = Color.rgb(237, 200, 80);
   private static final Color COLOR_1024 = Color.rgb(237, 197, 63);
   private static final Color COLOR_2048 = Color.rgb(237, 194, 46);
   private static final Color COLOR_OTHER = Color.BLACK;
   private static final Color COLOR_GAME_OVER = Color.rgb(238, 228, 218, 0.73);

   private static final Color COLOR_VALUE_LIGHT = Color.rgb(249, 246, 242); 
   // For tiles >= 8

   private static final Color COLOR_VALUE_DARK = Color.rgb(119, 110, 101); 
   // For tiles < 8

   //GridPane to hold the tiles and texts
   private GridPane pane;
   private Rectangle[][] rArray;
   private Text[][] textArray; 
   //stackpane to hold both the gridpane and the gameover rectangle
   private StackPane sPane;

   /*
    * Name: start(Stage primaryStage)
    * Purpose: This method helps initialize the whole board with the correct
    *          grids, colors, and values. The tiles and values are contained
    *          and created using arrays. this is done so that each individual
    *          tiles can be checked regardless of the location. The primaryStage
    *          passed in as the parameter is used to contain the scene, as well
    *          as everything inside the scene.
    * Parameter: Stage primaryStage
    * Return Type: void
    */

   @Override
      public void start(Stage primaryStage)
      {
         // Process Arguments and Initialize the Game Board
         processArgs(getParameters().getRaw().toArray(new String[0]));

         // Create the pane that will hold all of the visual objects
         pane = new GridPane();
         pane.setAlignment(Pos.CENTER);
         pane.setPadding(new Insets(11.5, 12.5, 13.5, 14.5));
         pane.setStyle("-fx-background-color: rgb(187, 173, 160)");
         // Set the spacing between the Tiles
         pane.setHgap(15); 
         pane.setVgap(15);

         rArray = new Rectangle [board.GRID_SIZE][board.GRID_SIZE];
         textArray = new Text[board.GRID_SIZE][board.GRID_SIZE];

         //creating each individual tiles using nested for-loops
         for(int x = 0; x < board.GRID_SIZE; x++)
         {
            for(int y = 0; y < board.GRID_SIZE; y++)
            {  
               //formatting and initializing each rectangle tile
               Rectangle tile = new Rectangle();
               rArray[x][y] = tile;
               rArray[x][y].setWidth(TILE_WIDTH);
               rArray[x][y].setHeight(TILE_WIDTH);
               rArray[x][y].setFill(COLOR_EMPTY);

               Text text = new Text(" ");

               // putting the integer values of the grid into a text array
               // but first checks if the value is 0, if it is, then the value
               // is not displayed
               if (board.getGrid()[x][y] != 0)
               {
                  text = new Text(Integer.toString(board.getGrid()[x][y]));
               }
               textArray[x][y] = text;
               textArray[x][y].setFont(Font.font("Clear Sans",
                        FontWeight.BOLD,30));


               //changes the fonts of the values of the tiles based on their
               //values
               switch (board.getGrid()[x][y])
               {
                  case 2: case 4: case 8:
                     textArray[x][y].setFont(Font.font("Clear Sans",
                              FontWeight.BOLD,TEXT_SIZE_LOW));
                     textArray[x][y].setFill(COLOR_VALUE_DARK);
                     break;
                  case 16: case 32: case 64:
                     textArray[x][y].setFont(Font.font("Clear Sans",
                              FontWeight.BOLD,TEXT_SIZE_LOW));
                     textArray[x][y].setFill(COLOR_VALUE_LIGHT);
                     break;
                  case 128: case 256: case 512:
                     textArray[x][y].setFont(Font.font("Clear Sans",
                              FontWeight.BOLD,TEXT_SIZE_MID));
                     textArray[x][y].setFill(COLOR_VALUE_LIGHT);
                     break;
                  case 1024: case 2048: case 4096: case 8192:
                     textArray[x][y].setFont(Font.font("Clear Sans",
                              FontWeight.BOLD,TEXT_SIZE_HIGH));
                     textArray[x][y].setFill(COLOR_VALUE_LIGHT);
                     break;
               }

               pane.setHalignment(textArray[x][y], HPos.CENTER);

            }
         }

         int column = 0;
         int row = 1; 
         for (int y = 0; y < board.GRID_SIZE; y++)
         {
            for (int x = 0; x < board.GRID_SIZE; x++)
            {
               //adding the labels and the rectangles into the pane
               pane.add(rArray[x][y], column, row);
               pane.add(textArray[x][y], column, row);
               column++;
               if (column == board.GRID_SIZE)
               {
                  column = 0;
               } 
            }
            row++;
         } 

         //adding the gameName to the top of the grid
         Text gameName = new Text("2048");
         gameName.setFont(Font.font("Clear Sans",
                  FontWeight.BOLD,TEXT_SIZE_MID));
         pane.add(gameName, 0, 0, 2, 1);
         pane.setHalignment(gameName, HPos.CENTER);

         //add the score to the top of the grid 
         Text gameScore=new Text("Score:" + Integer.toString(board.getScore()));
         gameScore.setFont(Font.font("Clear Sans",
                  FontWeight.BOLD,TEXT_SIZE_HIGH));
         pane.add(gameScore, 2, 0, 2, 1);
         pane.setHalignment(gameScore, HPos.CENTER);

         //changing the color of the tile if the tile is not empty 
         for(int x = 0; x < board.GRID_SIZE; x++)
         {
            for(int y = 1; y < board.GRID_SIZE; y++) 
            { 
               switch (board.getGrid()[x][y])
               {
                  case 0: rArray[x][y].setFill(COLOR_EMPTY);
                          break;
                  case 2: rArray[x][y].setFill(COLOR_2); 
                          break; 
                  case 4: rArray[x][y].setFill(COLOR_4); 
                          break;
                  case 8: rArray[x][y].setFill(COLOR_8); 
                          break;
                  case 16: rArray[x][y].setFill(COLOR_16); 
                           break;
                  case 32: rArray[x][y].setFill(COLOR_32); 
                           break;
                  case 64: rArray[x][y].setFill(COLOR_64); 
                           break;
                  case 128: rArray[x][y].setFill(COLOR_128); 
                            break;
                  case 256: rArray[x][y].setFill(COLOR_256); 
                            break;
                  case 512: rArray[x][y].setFill(COLOR_512); 
                            break;
                  case 1024: rArray[x][y].setFill(COLOR_1024); 
                             break;
                  case 2048: rArray[x][y].setFill(COLOR_2048); 
                             break;
               }
            } 
         } 
         //putting everything in a stackpane
         sPane = new StackPane();
         sPane.getChildren().addAll(pane);

         Scene scene = new Scene(sPane);
         primaryStage.setTitle("Gui2048");
         primaryStage.setScene(scene);
         primaryStage.show();
         scene.setOnKeyPressed(new myKeyHandler());
      }
   
   /*
    * Name: updateBoard()
    * Purpose: update the board if the move inputted by the user is a valid
    *          move. The act of updating the done by first clearing all the
    *          things on the board and giving each tile the correct color based
    *          on the values of those tiles. Also changes the fonts of the
    *          tiles.
    * Parameter: none
    * Return Type: void
    */

   private void updateBoard()
   {
      //clears everything that was on the board in order to avoid over lapping
      pane.getChildren().clear();
      for(int x = 0; x < board.GRID_SIZE; x++)
      {
         for(int y = 0; y < board.GRID_SIZE; y++)
         {  
            switch (board.getGrid()[x][y])
            {
               case 0: rArray[x][y].setFill(COLOR_EMPTY);
                       break;
               case 2: rArray[x][y].setFill(COLOR_2); 
                       break; 
               case 4: rArray[x][y].setFill(COLOR_4); 
                       break;
               case 8: rArray[x][y].setFill(COLOR_8); 
                       break;
               case 16: rArray[x][y].setFill(COLOR_16); 
                        break;
               case 32: rArray[x][y].setFill(COLOR_32); 
                        break;
               case 64: rArray[x][y].setFill(COLOR_64); 
                        break;
               case 128: rArray[x][y].setFill(COLOR_128); 
                         break;
               case 256: rArray[x][y].setFill(COLOR_256); 
                         break;
               case 512: rArray[x][y].setFill(COLOR_512); 
                         break;
               case 1024: rArray[x][y].setFill(COLOR_1024); 
                          break;
               case 2048: rArray[x][y].setFill(COLOR_2048); 
                          break;
            }

            Text text = new Text(" ");

            // putting the integer values of the grid into a text array
            // but first checks if the value is 0, if it is, then the value
            // is not displayed
            if (board.getGrid()[x][y] != 0)
            {
               text = new Text(Integer.toString(board.getGrid()[x][y]));
            }
            textArray[x][y] = text;
            textArray[x][y].setFont(Font.font("Clear Sans",
                     FontWeight.BOLD,30));


            //changing the texts fonts of the values of the grid based on the
            //values
            switch (board.getGrid()[x][y])
            {
               case 2: case 4: case 8:
                  textArray[x][y].setFont(Font.font("Clear Sans",
                           FontWeight.BOLD,TEXT_SIZE_LOW));
                  textArray[x][y].setFill(COLOR_VALUE_DARK);
                  break;
               case 16: case 32: case 64:
                  textArray[x][y].setFont(Font.font("Clear Sans",
                           FontWeight.BOLD,TEXT_SIZE_LOW));
                  textArray[x][y].setFill(COLOR_VALUE_LIGHT);
                  break;
               case 128: case 256: case 512:
                  textArray[x][y].setFont(Font.font("Clear Sans",
                           FontWeight.BOLD,TEXT_SIZE_MID));
                  textArray[x][y].setFill(COLOR_VALUE_LIGHT);
                  break;
               case 1024: case 2048: case 4096: case 8192:
                  textArray[x][y].setFont(Font.font("Clear Sans",
                           FontWeight.BOLD,TEXT_SIZE_HIGH));
                  textArray[x][y].setFill(COLOR_VALUE_LIGHT);
                  break;
            }

            pane.setHalignment(textArray[x][y], HPos.CENTER);
         }
      }

      //adding the gameName to the top of the grid
      Text gameName = new Text("2048");
      gameName.setFont(Font.font("Clear Sans",
               FontWeight.BOLD,TEXT_SIZE_MID));
      pane.add(gameName, 0, 0, 2, 1);
      pane.setHalignment(gameName, HPos.CENTER);

      int column = 0;
      int row = 1; 
      for (int x = 0; x < board.GRID_SIZE; x++)
      {
         for (int y = 0; y < board.GRID_SIZE; y++)
         {
            //adding the labels and the rectangles into the pane
            pane.add(rArray[x][y], column, row);
            pane.add(textArray[x][y], column, row);
            column++;
            if (column == board.GRID_SIZE)
            {
               column = 0;
            } 
         }
         row++;
      } 

      //add the score to the top of the grid 
      Text gameScore = new Text("Score:" + Integer.toString(board.getScore()));
      gameScore.setFont(Font.font("Clear Sans",
               FontWeight.BOLD,TEXT_SIZE_HIGH));
      pane.add(gameScore, 2, 0, 2, 1);
      pane.setHalignment(gameScore, HPos.CENTER);

   } 

   /*
    * Class: myKeyHandler 
    * Purpose: handles all the movements of the grid by detecting what the user
    *          has inputted. However, if the game is over, then a rectangle that
    *          covers the whole screen will appear. The sequence of action is
    *          1. check the direction inputted by the user
    *          2. move the whole board
    *          3. add tiles onto the board
    *          4. update the board
    */

   private class myKeyHandler implements EventHandler<KeyEvent>
   {
      @Override 
         public void handle(KeyEvent e)
         {
            if (board.isGameOver() == true)
            {
               //creates the rectangle gameover screen when game is over
               Rectangle overRec = new Rectangle();
               overRec.setWidth(sPane.getWidth());
               overRec.setHeight(sPane.getHeight());
               overRec.setFill(COLOR_GAME_OVER);

               Text overText = new Text("Game Over!");
               overText.setFont(Font.font("Clear Sans",
               FontWeight.BOLD,TEXT_SIZE_LOW));
               overText.setFill(COLOR_VALUE_DARK);

               sPane.getChildren().addAll(overRec);
               sPane.getChildren().addAll(overText);

               sPane.setAlignment(overText, Pos.CENTER);
            } 
            //handles the directions of the board
            switch(e.getCode())
            {
               case LEFT:
                  if (board.canMove(Direction.LEFT) == true)
                  {
                     board.move(Direction.LEFT);
                     board.addRandomTile();
                     updateBoard();
                     System.out.println("Moving <Up>");
                  }

                  break;
               case RIGHT:                      
                  if (board.canMove(Direction.RIGHT) == true)
                  {
                     board.move(Direction.RIGHT);
                     board.addRandomTile();
                     updateBoard();
                     System.out.println("Moving <Down>");
                  }

                  break;
               case DOWN:
                  if (board.canMove(Direction.DOWN) == true)
                  {
                     board.move(Direction.DOWN);
                     board.addRandomTile();
                     updateBoard();
                     System.out.println("Moving <Right>");
                  }

                  break;
               case UP:
                  if (board.canMove(Direction.UP) == true)
                  {
                     board.move(Direction.UP);
                     board.addRandomTile();
                     updateBoard();
                     System.out.println("Moving <Left>");
                  }

                  break;
                  case S:
                  try{
                  board.saveBoard(outputBoard);
                  System.out.println("Saving Board to outputBoard");
                  }catch(IOException s){
                  System.out.println("saveBoard threw an exception!");
                  }
                  break;
            }
         }
   }



   /** DO NOT EDIT BELOW */

   // The method used to process the command line arguments
   private void processArgs(String[] args)
   {
      String inputBoard = null;   // The filename for where to load the Board
      int boardSize = 0;          // The Size of the Board

      // Arguments must come in pairs
      if((args.length % 2) != 0)
      {
         printUsage();
         System.exit(-1);
      }

      // Process all the arguments 
      for(int i = 0; i < args.length; i += 2)
      {
         if(args[i].equals("-i"))
         {   // We are processing the argument that specifies
            // the input file to be used to set the board
            inputBoard = args[i + 1];
         }
         else if(args[i].equals("-o"))
         {   // We are processing the argument that specifies
            // the output file to be used to save the board
            outputBoard = args[i + 1];
         }
         else if(args[i].equals("-s"))
         {   // We are processing the argument that specifies
            // the size of the Board
            boardSize = Integer.parseInt(args[i + 1]);
         }
         else
         {   // Incorrect Argument 
            printUsage();
            System.exit(-1);
         }
      }

      // Set the default output file if none specified
      if(outputBoard == null)
         outputBoard = "2048.board";
      // Set the default Board size if none specified or less than 2
      if(boardSize < 2)
         boardSize = 4;

      // Initialize the Game Board
      try{
         if(inputBoard != null)
            board = new Board(inputBoard, new Random());
         else
            board = new Board(boardSize, new Random());
      }
      catch (Exception e)
      {
         System.out.println(e.getClass().getName() + 
               " was thrown while creating a " +
               "Board from file " + inputBoard);
         System.out.println("Either your Board(String, Random) " +
               "Constructor is broken or the file isn't " +
               "formated correctly");
         System.exit(-1);
      }
   }

   // Print the Usage Message 
   private static void printUsage()
   {
      System.out.println("Gui2048");
      System.out.println("Usage:  Gui2048 [-i|o file ...]");
      System.out.println();
      System.out.println("  Command line arguments come in pairs of the "+ 
            "form: <command> <argument>");
      System.out.println();
      System.out.println("  -i [file]  -> Specifies a 2048 board that " + 
            "should be loaded");
      System.out.println();
      System.out.println("  -o [file]  -> Specifies a file that should be " + 
            "used to save the 2048 board");
      System.out.println("                If none specified then the " + 
            "default \"2048.board\" file will be used");  
      System.out.println("  -s [size]  -> Specifies the size of the 2048" + 
            "board if an input file hasn't been"); 
      System.out.println("                specified.  If both -s and -i" + 
            "are used, then the size of the board"); 
      System.out.println("                will be determined by the input" +
            " file. The default size is 4.");
   }
}
